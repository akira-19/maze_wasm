"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_ts"],{

/***/ "../pkg/maze_wasm.js":
/*!***************************!*\
  !*** ../pkg/maze_wasm.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"Field\": () => (/* binding */ Field),\n/* harmony export */   \"GameStatus\": () => (/* binding */ GameStatus),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync)\n/* harmony export */ });\n/* harmony import */ var _snippets_maze_wasm_16eca36b9d22e7af_www_utils_rnd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/maze_wasm-16eca36b9d22e7af/www/utils/rnd.js */ \"../pkg/snippets/maze_wasm-16eca36b9d22e7af/www/utils/rnd.js\");\n\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet cachedUint32Memory0 = new Uint32Array();\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Down:1,\"1\":\"Down\",Left:2,\"2\":\"Left\",Right:3,\"3\":\"Right\", });\n/**\n*/\nconst GameStatus = Object.freeze({ BeforePlaying:0,\"0\":\"BeforePlaying\",Playing:1,\"1\":\"Playing\",Done:2,\"2\":\"Done\", });\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Field.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @returns {Field}\n    */\n    static new(width) {\n        const ret = wasm.field_new(width);\n        return Field.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.field_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    walls() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_walls(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    player_idx() {\n        const ret = wasm.field_player_idx(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    status() {\n        const ret = wasm.field_status(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} direction\n    */\n    move_player(direction) {\n        wasm.field_move_player(this.ptr, direction);\n    }\n    /**\n    */\n    generate_maze() {\n        wasm.field_generate_maze(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rnd_f7f2992df6a384f5 = function(arg0) {\n        const ret = (0,_snippets_maze_wasm_16eca36b9d22e7af_www_utils_rnd_js__WEBPACK_IMPORTED_MODULE_0__.rnd)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint32Memory0 = new Uint32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! maze_wasm_bg.wasm */ \"../pkg/maze_wasm_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n//# sourceURL=webpack://www/../pkg/maze_wasm.js?");

/***/ }),

/***/ "../pkg/snippets/maze_wasm-16eca36b9d22e7af/www/utils/rnd.js":
/*!*******************************************************************!*\
  !*** ../pkg/snippets/maze_wasm-16eca36b9d22e7af/www/utils/rnd.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"log\": () => (/* binding */ log),\n/* harmony export */   \"rnd\": () => (/* binding */ rnd)\n/* harmony export */ });\nfunction rnd(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction log(message) {\n  console.log(message);\n}\n\n\n//# sourceURL=webpack://www/../pkg/snippets/maze_wasm-16eca36b9d22e7af/www/utils/rnd.js?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var maze_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! maze_wasm */ \"../pkg/maze_wasm.js\");\n\n(0,maze_wasm__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().then(function (wasm) {\n    var fieldSize = 19;\n    var field = maze_wasm__WEBPACK_IMPORTED_MODULE_0__.Field[\"new\"](fieldSize);\n    var width = field.width();\n    var startIdx = fieldSize + 1;\n    var goalIdx = (fieldSize + 1) * (fieldSize - 2);\n    var player_idx = field.player_idx();\n    var time;\n    var CELL_SIZE = 20;\n    var gameControlBtn = document.getElementById('game-control-btn');\n    var canvas = document.getElementById('maze-canvas');\n    var ctx = canvas.getContext('2d');\n    canvas.height = width * CELL_SIZE;\n    canvas.width = width * CELL_SIZE;\n    gameControlBtn.addEventListener('click', function (_) {\n        if (field.status() !== maze_wasm__WEBPACK_IMPORTED_MODULE_0__.GameStatus.BeforePlaying)\n            return;\n        time = new Date().getTime();\n        field.generate_maze();\n        drawField();\n        colorWalls();\n        colorGoal();\n        colorPlayer();\n    });\n    document.addEventListener('keydown', function (e) {\n        if (field.status() !== maze_wasm__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Playing)\n            return;\n        e.code === 'ArrowUp' && field.move_player(maze_wasm__WEBPACK_IMPORTED_MODULE_0__.Direction.Up);\n        e.code === 'ArrowDown' && field.move_player(maze_wasm__WEBPACK_IMPORTED_MODULE_0__.Direction.Down);\n        e.code === 'ArrowLeft' && field.move_player(maze_wasm__WEBPACK_IMPORTED_MODULE_0__.Direction.Left);\n        e.code === 'ArrowRight' && field.move_player(maze_wasm__WEBPACK_IMPORTED_MODULE_0__.Direction.Right);\n        resetPlayerColor();\n        colorPlayer();\n        if (field.status() === maze_wasm__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Done) {\n            setTimeout(function () {\n                var timeDiff = Math.floor((new Date().getTime() - time) / 1000);\n                alert(\"Your Record is \".concat(timeDiff, \" seconds!\"));\n            }, 100);\n        }\n    });\n    ctx.font = '12px serif';\n    function drawField() {\n        if (ctx === null)\n            return;\n        ctx.beginPath();\n        for (var x = 0; x < width + 1; x++) {\n            ctx.moveTo(CELL_SIZE * x, 0);\n            ctx.lineTo(CELL_SIZE * x, CELL_SIZE * width);\n        }\n        for (var y = 0; y < width + 1; y++) {\n            ctx.moveTo(0, CELL_SIZE * y);\n            ctx.lineTo(CELL_SIZE * width, CELL_SIZE * y);\n        }\n        ctx.stroke();\n    }\n    function colorWalls() {\n        if (ctx === null)\n            return;\n        var walls = field.walls();\n        for (var i = 0; i < width * width; i++) {\n            if (walls[i] === 1) {\n                var x = i % width;\n                var y = Math.floor(i / width);\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n                ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n            }\n        }\n    }\n    function colorGoal() {\n        if (ctx === null)\n            return;\n        var x = goalIdx % width;\n        var y = Math.floor(goalIdx / width);\n        ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n    }\n    function colorPlayer() {\n        if (ctx === null)\n            return;\n        var x = field.player_idx() % width;\n        var y = Math.floor(field.player_idx() / width);\n        ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        ctx.stroke();\n    }\n    function resetPlayerColor() {\n        if (ctx === null)\n            return;\n        var x = player_idx % width;\n        var y = Math.floor(player_idx / width);\n        ctx.fillStyle = 'rgb(255, 255, 255)';\n        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        player_idx = field.player_idx();\n    }\n});\n\n\n//# sourceURL=webpack://www/./index.ts?");

/***/ }),

/***/ "../pkg/maze_wasm_bg.wasm":
/*!********************************!*\
  !*** ../pkg/maze_wasm_bg.wasm ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"629cdc024dc334c395e1.wasm\";\n\n//# sourceURL=webpack://www/../pkg/maze_wasm_bg.wasm?");

/***/ })

}]);